CREATE SCHEMA IF NOT EXISTS bl_3nf;


-- DROP TABLE IF EXISTS bl_3nf.ce_sales CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_customer_scd CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_product CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_category CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_retailer CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_sales_method CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_payment_method CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_city CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_state CASCADE;
-- DROP TABLE IF EXISTS bl_3nf.ce_region CASCADE;

-- CATEGORY (surrogate PK + source uniqueness)
CREATE TABLE bl_3nf.ce_category (
  category_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category_src_id   BIGINT NOT NULL,
  category          VARCHAR(150) NOT NULL,
  source_system     VARCHAR(50)  NOT NULL,
  source_entity     VARCHAR(50)  NOT NULL,
  insert_dt         TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt         TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT uq_ce_category_src UNIQUE (source_system, source_entity, category_src_id)
);

-- PRODUCT (surrogate PK + source uniqueness; FK to category_id)
CREATE TABLE bl_3nf.ce_product (
  product_id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  product_src_id    BIGINT NOT NULL,
  product_name      VARCHAR(255) NOT NULL,
  category_id       BIGINT NOT NULL REFERENCES bl_3nf.ce_category(category_id),
  source_system     VARCHAR(50)  NOT NULL,
  source_entity     VARCHAR(50)  NOT NULL,
  insert_dt         TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt         TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT uq_ce_product_src UNIQUE (source_system, source_entity, product_src_id)
);

-- RETAILER (surrogate PK; src id = name as your mentor wants)
CREATE TABLE bl_3nf.ce_retailer (
  retailer_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  retailer_src_id   VARCHAR(255) NOT NULL,   -- put NAME here
  retailer          VARCHAR(255) NOT NULL,   -- the same NAME
  source_system     VARCHAR(50)  NOT NULL,
  source_entity     VARCHAR(50)  NOT NULL,
  insert_dt         TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt         TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT uq_ce_retailer_src UNIQUE (source_system, source_entity, retailer_src_id)
);

-- METHODS (surrogate PKs + source uniqueness)
CREATE TABLE bl_3nf.ce_sales_method (
  sales_method_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sales_method_src_id   INT NOT NULL,
  sales_method          VARCHAR(100) NOT NULL,
  source_system         VARCHAR(50)  NOT NULL,
  source_entity         VARCHAR(50)  NOT NULL,
  insert_dt             TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt             TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT uq_ce_sales_method_src UNIQUE (source_system, source_entity, sales_method_src_id)
);

CREATE TABLE bl_3nf.ce_payment_method (
  payment_method_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  payment_method_src_id   INT NOT NULL,
  payment_method          VARCHAR(100) NOT NULL,
  source_system           VARCHAR(50)  NOT NULL,
  source_entity           VARCHAR(50)  NOT NULL,
  insert_dt               TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt               TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT uq_ce_payment_method_src UNIQUE (source_system, source_entity, payment_method_src_id)
);


-- REGION / STATE / CITY
CREATE TABLE IF NOT EXISTS bl_3nf.ce_region (
  region_id       BIGINT PRIMARY KEY,
  region_src_id   BIGINT,
  region_name     VARCHAR(100) NOT NULL,
  insert_dt       TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt       TIMESTAMP NOT NULL DEFAULT NOW(),
  source_system   VARCHAR(50),
  source_entity   VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS bl_3nf.ce_state (
  state_id        BIGINT PRIMARY KEY,
  state_src_id    BIGINT,
  state_name      VARCHAR(100) NOT NULL,
  region_id       BIGINT REFERENCES bl_3nf.ce_region(region_id),
  insert_dt       TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt       TIMESTAMP NOT NULL DEFAULT NOW(),
  source_system   VARCHAR(50),
  source_entity   VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS bl_3nf.ce_city (
  city_id         BIGINT PRIMARY KEY,
  city_src_id     BIGINT,
  city_name       VARCHAR(150) NOT NULL,
  state_id        BIGINT REFERENCES bl_3nf.ce_state(state_id),
  insert_dt       TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt       TIMESTAMP NOT NULL DEFAULT NOW(),
  source_system   VARCHAR(50),
  source_entity   VARCHAR(50)
);

-- CUSTOMER (SCD2)
CREATE TABLE IF NOT EXISTS bl_3nf.ce_customer_scd (
  customer_id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- surrogate per version
  customer_src_id  BIGINT NOT NULL,                -- business key from source
  first_name       VARCHAR(100),
  last_name        VARCHAR(100),
  full_name        VARCHAR(205),
  start_dt         DATE NOT NULL,
  end_dt           DATE NOT NULL,
  is_active        BOOLEAN NOT NULL,               -- TRUE for current row
  insert_dt        TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt        TIMESTAMP NOT NULL DEFAULT NOW(),
  source_system    VARCHAR(50),
  source_entity    VARCHAR(50),
  CONSTRAINT uq_ce_customer_current UNIQUE (customer_src_id, is_active)
);



CREATE TABLE bl_3nf.ce_sales (
  sale_id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sale_src_id       VARCHAR(100) NOT NULL,         -- CSV index only
  invoice_ts        TIMESTAMP NOT NULL,

  customer_id       BIGINT REFERENCES bl_3nf.ce_customer_scd(customer_id),
  product_id        BIGINT REFERENCES bl_3nf.ce_product(product_id),
  retailer_id       BIGINT REFERENCES bl_3nf.ce_retailer(retailer_id),
  city_id           BIGINT REFERENCES bl_3nf.ce_city(city_id),
  sales_method_id   BIGINT REFERENCES bl_3nf.ce_sales_method(sales_method_id),
  payment_method_id BIGINT REFERENCES bl_3nf.ce_payment_method(payment_method_id),

  units_sold        INT,
  price_per_unit    NUMERIC(12,2),
  total_sales       NUMERIC(14,2),
  operating_profit  NUMERIC(14,2),
  operating_margin  NUMERIC(7,4),

  avg_unit_price    NUMERIC(12,4),
  profit_per_unit   NUMERIC(12,4),
  is_high_margin    BOOLEAN,

  source_system     VARCHAR(50) NOT NULL,
  source_entity     VARCHAR(50) NOT NULL,
  insert_dt         TIMESTAMP NOT NULL DEFAULT NOW(),
  update_dt         TIMESTAMP NOT NULL DEFAULT NOW(),

  -- Dedup key: allows repeated sale_src_id if anything else differs
  CONSTRAINT uq_ce_sales_nk UNIQUE (
    source_system, source_entity, sale_src_id, invoice_ts,
    customer_id, product_id, retailer_id, city_id,
    sales_method_id, payment_method_id,
    units_sold, price_per_unit, total_sales
  )
);


INSERT INTO bl_3nf.ce_category(category_id, category_src_id, category, source_system, source_entity)
SELECT -1, -1, 'N/A', 'MANUAL', 'MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_category WHERE category_id = -1);

INSERT INTO bl_3nf.ce_product(product_id, product_src_id, product_name, category_id, source_system, source_entity)
SELECT -1, -1, 'N/A', -1, 'MANUAL', 'MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_product WHERE product_id = -1);

-- Retailer default
INSERT INTO bl_3nf.ce_retailer (retailer_id, retailer_src_id, retailer, source_system, source_entity)
SELECT -1, 'N/A', 'N/A', 'MANUAL','MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_retailer WHERE retailer_id = -1);

-- Methods default
INSERT INTO bl_3nf.ce_sales_method (sales_method_id, sales_method_src_id, sales_method, source_system, source_entity)
SELECT -1, -1, 'N/A','MANUAL','MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_sales_method WHERE sales_method_id = -1);

INSERT INTO bl_3nf.ce_payment_method (payment_method_id, payment_method_src_id, payment_method, source_system, source_entity)
SELECT -1, -1, 'N/A','MANUAL','MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_payment_method WHERE payment_method_id = -1);

INSERT INTO bl_3nf.ce_region(region_id, region_src_id, region_name, source_system, source_entity)
SELECT -1, -1, 'N/A', 'MANUAL', 'MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_region WHERE region_id = -1);

INSERT INTO bl_3nf.ce_state(state_id, state_src_id, state_name, region_id, source_system, source_entity)
SELECT -1, -1, 'N/A', -1, 'MANUAL', 'MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_state WHERE state_id = -1);

INSERT INTO bl_3nf.ce_city(city_id, city_src_id, city_name, state_id, source_system, source_entity)
SELECT -1, -1, 'N/A', -1, 'MANUAL', 'MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_city WHERE city_id = -1);


INSERT INTO bl_3nf.ce_customer_scd(customer_id, customer_src_id, first_name, last_name, full_name,
  start_dt, end_dt, is_active, source_system, source_entity)
SELECT -1, -1, 'N/A', 'N/A', 'N/A', DATE '1900-01-01', DATE '9999-12-31', FALSE, 'MANUAL', 'MANUAL'
WHERE NOT EXISTS (SELECT 1 FROM bl_3nf.ce_customer_scd WHERE customer_id = -1);



-- SELECT * FROM bl_3nf.ce_customer_scd

-- SELECT * FROM sa_instore.src_instore_sales LIMIT 100


-- SELECT DISTINCT retailer FROM sa_instore.src_instore_sales


-- SELECT DISTINCT retailer_id, MAX(retailer) OVER(PARTITION BY retailer_id) AS hello
-- FROM sa_instore.src_instore_sales

-- dbear


